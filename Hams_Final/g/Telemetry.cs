// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: telemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Meshtastic.Protobufs {

  /// <summary>Holder for reflection information generated from telemetry.proto</summary>
  public static partial class TelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for telemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg90ZWxlbWV0cnkucHJvdG8SCm1lc2h0YXN0aWMiaQoNRGV2aWNlTWV0cmlj",
            "cxIVCg1iYXR0ZXJ5X2xldmVsGAEgASgNEg8KB3ZvbHRhZ2UYAiABKAISGwoT",
            "Y2hhbm5lbF91dGlsaXphdGlvbhgDIAEoAhITCgthaXJfdXRpbF90eBgEIAEo",
            "AiKbAQoSRW52aXJvbm1lbnRNZXRyaWNzEhMKC3RlbXBlcmF0dXJlGAEgASgC",
            "EhkKEXJlbGF0aXZlX2h1bWlkaXR5GAIgASgCEhsKE2Jhcm9tZXRyaWNfcHJl",
            "c3N1cmUYAyABKAISFgoOZ2FzX3Jlc2lzdGFuY2UYBCABKAISDwoHdm9sdGFn",
            "ZRgFIAEoAhIPCgdjdXJyZW50GAYgASgCIr8CChFBaXJRdWFsaXR5TWV0cmlj",
            "cxIVCg1wbTEwX3N0YW5kYXJkGAEgASgNEhUKDXBtMjVfc3RhbmRhcmQYAiAB",
            "KA0SFgoOcG0xMDBfc3RhbmRhcmQYAyABKA0SGgoScG0xMF9lbnZpcm9ubWVu",
            "dGFsGAQgASgNEhoKEnBtMjVfZW52aXJvbm1lbnRhbBgFIAEoDRIbChNwbTEw",
            "MF9lbnZpcm9ubWVudGFsGAYgASgNEhYKDnBhcnRpY2xlc18wM3VtGAcgASgN",
            "EhYKDnBhcnRpY2xlc18wNXVtGAggASgNEhYKDnBhcnRpY2xlc18xMHVtGAkg",
            "ASgNEhYKDnBhcnRpY2xlc18yNXVtGAogASgNEhYKDnBhcnRpY2xlc181MHVt",
            "GAsgASgNEhcKD3BhcnRpY2xlc18xMDB1bRgMIAEoDSLWAQoJVGVsZW1ldHJ5",
            "EgwKBHRpbWUYASABKAcSMwoOZGV2aWNlX21ldHJpY3MYAiABKAsyGS5tZXNo",
            "dGFzdGljLkRldmljZU1ldHJpY3NIABI9ChNlbnZpcm9ubWVudF9tZXRyaWNz",
            "GAMgASgLMh4ubWVzaHRhc3RpYy5FbnZpcm9ubWVudE1ldHJpY3NIABI8ChNh",
            "aXJfcXVhbGl0eV9tZXRyaWNzGAQgASgLMh0ubWVzaHRhc3RpYy5BaXJRdWFs",
            "aXR5TWV0cmljc0gAQgkKB3ZhcmlhbnQqxwEKE1RlbGVtZXRyeVNlbnNvclR5",
            "cGUSEAoMU0VOU09SX1VOU0VUEAASCgoGQk1FMjgwEAESCgoGQk1FNjgwEAIS",
            "CwoHTUNQOTgwOBADEgoKBklOQTI2MBAEEgoKBklOQTIxORAFEgoKBkJNUDI4",
            "MBAGEgkKBVNIVEMzEAcSCQoFTFBTMjIQCBILCgdRTUM2MzEwEAkSCwoHUU1J",
            "ODY1OBAKEgwKCFFNQzU4ODNMEAsSCQoFU0hUMzEQDBIMCghQTVNBMDAzSRAN",
            "QmQKE2NvbS5nZWVrc3ZpbGxlLm1lc2hCD1RlbGVtZXRyeVByb3Rvc1oiZ2l0",
            "aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMu",
            "UHJvdG9idWZzugIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Meshtastic.Protobufs.TelemetrySensorType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.DeviceMetrics), global::Meshtastic.Protobufs.DeviceMetrics.Parser, new[]{ "BatteryLevel", "Voltage", "ChannelUtilization", "AirUtilTx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.EnvironmentMetrics), global::Meshtastic.Protobufs.EnvironmentMetrics.Parser, new[]{ "Temperature", "RelativeHumidity", "BarometricPressure", "GasResistance", "Voltage", "Current" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.AirQualityMetrics), global::Meshtastic.Protobufs.AirQualityMetrics.Parser, new[]{ "Pm10Standard", "Pm25Standard", "Pm100Standard", "Pm10Environmental", "Pm25Environmental", "Pm100Environmental", "Particles03Um", "Particles05Um", "Particles10Um", "Particles25Um", "Particles50Um", "Particles100Um" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Telemetry), global::Meshtastic.Protobufs.Telemetry.Parser, new[]{ "Time", "DeviceMetrics", "EnvironmentMetrics", "AirQualityMetrics" }, new[]{ "Variant" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  /// Supported I2C Sensors for telemetry in Meshtastic
  /// </summary>
  public enum TelemetrySensorType {
    /// <summary>
    ///
    /// No external telemetry sensor explicitly set
    /// </summary>
    [pbr::OriginalName("SENSOR_UNSET")] SensorUnset = 0,
    /// <summary>
    ///
    /// High accuracy temperature, pressure, humidity
    /// </summary>
    [pbr::OriginalName("BME280")] Bme280 = 1,
    /// <summary>
    ///
    /// High accuracy temperature, pressure, humidity, and air resistance
    /// </summary>
    [pbr::OriginalName("BME680")] Bme680 = 2,
    /// <summary>
    ///
    /// Very high accuracy temperature
    /// </summary>
    [pbr::OriginalName("MCP9808")] Mcp9808 = 3,
    /// <summary>
    ///
    /// Moderate accuracy current and voltage
    /// </summary>
    [pbr::OriginalName("INA260")] Ina260 = 4,
    /// <summary>
    ///
    /// Moderate accuracy current and voltage
    /// </summary>
    [pbr::OriginalName("INA219")] Ina219 = 5,
    /// <summary>
    ///
    /// High accuracy temperature and pressure
    /// </summary>
    [pbr::OriginalName("BMP280")] Bmp280 = 6,
    /// <summary>
    ///
    /// High accuracy temperature and humidity
    /// </summary>
    [pbr::OriginalName("SHTC3")] Shtc3 = 7,
    /// <summary>
    ///
    /// High accuracy pressure
    /// </summary>
    [pbr::OriginalName("LPS22")] Lps22 = 8,
    /// <summary>
    ///
    /// 3-Axis magnetic sensor
    /// </summary>
    [pbr::OriginalName("QMC6310")] Qmc6310 = 9,
    /// <summary>
    ///
    /// 6-Axis inertial measurement sensor
    /// </summary>
    [pbr::OriginalName("QMI8658")] Qmi8658 = 10,
    /// <summary>
    ///
    /// 3-Axis magnetic sensor
    /// </summary>
    [pbr::OriginalName("QMC5883L")] Qmc5883L = 11,
    /// <summary>
    ///
    /// High accuracy temperature and humidity
    /// </summary>
    [pbr::OriginalName("SHT31")] Sht31 = 12,
    /// <summary>
    ///
    /// PM2.5 air quality sensor
    /// </summary>
    [pbr::OriginalName("PMSA003I")] Pmsa003I = 13,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  /// Key native device metrics such as battery level
  /// </summary>
  public sealed partial class DeviceMetrics : pb::IMessage<DeviceMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceMetrics> _parser = new pb::MessageParser<DeviceMetrics>(() => new DeviceMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetrics(DeviceMetrics other) : this() {
      batteryLevel_ = other.batteryLevel_;
      voltage_ = other.voltage_;
      channelUtilization_ = other.channelUtilization_;
      airUtilTx_ = other.airUtilTx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetrics Clone() {
      return new DeviceMetrics(this);
    }

    /// <summary>Field number for the "battery_level" field.</summary>
    public const int BatteryLevelFieldNumber = 1;
    private uint batteryLevel_;
    /// <summary>
    ///
    /// 0-100 (>100 means powered)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
      set {
        batteryLevel_ = value;
      }
    }

    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 2;
    private float voltage_;
    /// <summary>
    ///
    /// Voltage measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Voltage {
      get { return voltage_; }
      set {
        voltage_ = value;
      }
    }

    /// <summary>Field number for the "channel_utilization" field.</summary>
    public const int ChannelUtilizationFieldNumber = 3;
    private float channelUtilization_;
    /// <summary>
    ///
    /// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChannelUtilization {
      get { return channelUtilization_; }
      set {
        channelUtilization_ = value;
      }
    }

    /// <summary>Field number for the "air_util_tx" field.</summary>
    public const int AirUtilTxFieldNumber = 4;
    private float airUtilTx_;
    /// <summary>
    ///
    /// Percent of airtime for transmission used within the last hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirUtilTx {
      get { return airUtilTx_; }
      set {
        airUtilTx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatteryLevel != other.BatteryLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelUtilization, other.ChannelUtilization)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirUtilTx, other.AirUtilTx)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BatteryLevel != 0) hash ^= BatteryLevel.GetHashCode();
      if (Voltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Voltage);
      if (ChannelUtilization != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelUtilization);
      if (AirUtilTx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirUtilTx);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BatteryLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatteryLevel);
      }
      if (Voltage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Voltage);
      }
      if (ChannelUtilization != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ChannelUtilization);
      }
      if (AirUtilTx != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AirUtilTx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BatteryLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatteryLevel);
      }
      if (Voltage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Voltage);
      }
      if (ChannelUtilization != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ChannelUtilization);
      }
      if (AirUtilTx != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AirUtilTx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BatteryLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatteryLevel);
      }
      if (Voltage != 0F) {
        size += 1 + 4;
      }
      if (ChannelUtilization != 0F) {
        size += 1 + 4;
      }
      if (AirUtilTx != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceMetrics other) {
      if (other == null) {
        return;
      }
      if (other.BatteryLevel != 0) {
        BatteryLevel = other.BatteryLevel;
      }
      if (other.Voltage != 0F) {
        Voltage = other.Voltage;
      }
      if (other.ChannelUtilization != 0F) {
        ChannelUtilization = other.ChannelUtilization;
      }
      if (other.AirUtilTx != 0F) {
        AirUtilTx = other.AirUtilTx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BatteryLevel = input.ReadUInt32();
            break;
          }
          case 21: {
            Voltage = input.ReadFloat();
            break;
          }
          case 29: {
            ChannelUtilization = input.ReadFloat();
            break;
          }
          case 37: {
            AirUtilTx = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BatteryLevel = input.ReadUInt32();
            break;
          }
          case 21: {
            Voltage = input.ReadFloat();
            break;
          }
          case 29: {
            ChannelUtilization = input.ReadFloat();
            break;
          }
          case 37: {
            AirUtilTx = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Weather station or other environmental metrics
  /// </summary>
  public sealed partial class EnvironmentMetrics : pb::IMessage<EnvironmentMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnvironmentMetrics> _parser = new pb::MessageParser<EnvironmentMetrics>(() => new EnvironmentMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EnvironmentMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnvironmentMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnvironmentMetrics(EnvironmentMetrics other) : this() {
      temperature_ = other.temperature_;
      relativeHumidity_ = other.relativeHumidity_;
      barometricPressure_ = other.barometricPressure_;
      gasResistance_ = other.gasResistance_;
      voltage_ = other.voltage_;
      current_ = other.current_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnvironmentMetrics Clone() {
      return new EnvironmentMetrics(this);
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 1;
    private float temperature_;
    /// <summary>
    ///
    /// Temperature measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "relative_humidity" field.</summary>
    public const int RelativeHumidityFieldNumber = 2;
    private float relativeHumidity_;
    /// <summary>
    ///
    /// Relative humidity percent measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RelativeHumidity {
      get { return relativeHumidity_; }
      set {
        relativeHumidity_ = value;
      }
    }

    /// <summary>Field number for the "barometric_pressure" field.</summary>
    public const int BarometricPressureFieldNumber = 3;
    private float barometricPressure_;
    /// <summary>
    ///
    /// Barometric pressure in hPA measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BarometricPressure {
      get { return barometricPressure_; }
      set {
        barometricPressure_ = value;
      }
    }

    /// <summary>Field number for the "gas_resistance" field.</summary>
    public const int GasResistanceFieldNumber = 4;
    private float gasResistance_;
    /// <summary>
    ///
    /// Gas resistance in mOhm measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GasResistance {
      get { return gasResistance_; }
      set {
        gasResistance_ = value;
      }
    }

    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 5;
    private float voltage_;
    /// <summary>
    ///
    /// Voltage measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Voltage {
      get { return voltage_; }
      set {
        voltage_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 6;
    private float current_;
    /// <summary>
    ///
    /// Current measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EnvironmentMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EnvironmentMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RelativeHumidity, other.RelativeHumidity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BarometricPressure, other.BarometricPressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasResistance, other.GasResistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Current, other.Current)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
      if (RelativeHumidity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RelativeHumidity);
      if (BarometricPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BarometricPressure);
      if (GasResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasResistance);
      if (Voltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Voltage);
      if (Current != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Current);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Temperature != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Temperature);
      }
      if (RelativeHumidity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RelativeHumidity);
      }
      if (BarometricPressure != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BarometricPressure);
      }
      if (GasResistance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(GasResistance);
      }
      if (Voltage != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Voltage);
      }
      if (Current != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Temperature != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Temperature);
      }
      if (RelativeHumidity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RelativeHumidity);
      }
      if (BarometricPressure != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BarometricPressure);
      }
      if (GasResistance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(GasResistance);
      }
      if (Voltage != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Voltage);
      }
      if (Current != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Temperature != 0F) {
        size += 1 + 4;
      }
      if (RelativeHumidity != 0F) {
        size += 1 + 4;
      }
      if (BarometricPressure != 0F) {
        size += 1 + 4;
      }
      if (GasResistance != 0F) {
        size += 1 + 4;
      }
      if (Voltage != 0F) {
        size += 1 + 4;
      }
      if (Current != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EnvironmentMetrics other) {
      if (other == null) {
        return;
      }
      if (other.Temperature != 0F) {
        Temperature = other.Temperature;
      }
      if (other.RelativeHumidity != 0F) {
        RelativeHumidity = other.RelativeHumidity;
      }
      if (other.BarometricPressure != 0F) {
        BarometricPressure = other.BarometricPressure;
      }
      if (other.GasResistance != 0F) {
        GasResistance = other.GasResistance;
      }
      if (other.Voltage != 0F) {
        Voltage = other.Voltage;
      }
      if (other.Current != 0F) {
        Current = other.Current;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Temperature = input.ReadFloat();
            break;
          }
          case 21: {
            RelativeHumidity = input.ReadFloat();
            break;
          }
          case 29: {
            BarometricPressure = input.ReadFloat();
            break;
          }
          case 37: {
            GasResistance = input.ReadFloat();
            break;
          }
          case 45: {
            Voltage = input.ReadFloat();
            break;
          }
          case 53: {
            Current = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Temperature = input.ReadFloat();
            break;
          }
          case 21: {
            RelativeHumidity = input.ReadFloat();
            break;
          }
          case 29: {
            BarometricPressure = input.ReadFloat();
            break;
          }
          case 37: {
            GasResistance = input.ReadFloat();
            break;
          }
          case 45: {
            Voltage = input.ReadFloat();
            break;
          }
          case 53: {
            Current = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Air quality metrics
  /// </summary>
  public sealed partial class AirQualityMetrics : pb::IMessage<AirQualityMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AirQualityMetrics> _parser = new pb::MessageParser<AirQualityMetrics>(() => new AirQualityMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AirQualityMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AirQualityMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AirQualityMetrics(AirQualityMetrics other) : this() {
      pm10Standard_ = other.pm10Standard_;
      pm25Standard_ = other.pm25Standard_;
      pm100Standard_ = other.pm100Standard_;
      pm10Environmental_ = other.pm10Environmental_;
      pm25Environmental_ = other.pm25Environmental_;
      pm100Environmental_ = other.pm100Environmental_;
      particles03Um_ = other.particles03Um_;
      particles05Um_ = other.particles05Um_;
      particles10Um_ = other.particles10Um_;
      particles25Um_ = other.particles25Um_;
      particles50Um_ = other.particles50Um_;
      particles100Um_ = other.particles100Um_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AirQualityMetrics Clone() {
      return new AirQualityMetrics(this);
    }

    /// <summary>Field number for the "pm10_standard" field.</summary>
    public const int Pm10StandardFieldNumber = 1;
    private uint pm10Standard_;
    /// <summary>
    ///
    /// Concentration Units Standard PM1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm10Standard {
      get { return pm10Standard_; }
      set {
        pm10Standard_ = value;
      }
    }

    /// <summary>Field number for the "pm25_standard" field.</summary>
    public const int Pm25StandardFieldNumber = 2;
    private uint pm25Standard_;
    /// <summary>
    ///
    /// Concentration Units Standard PM2.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm25Standard {
      get { return pm25Standard_; }
      set {
        pm25Standard_ = value;
      }
    }

    /// <summary>Field number for the "pm100_standard" field.</summary>
    public const int Pm100StandardFieldNumber = 3;
    private uint pm100Standard_;
    /// <summary>
    ///
    /// Concentration Units Standard PM10.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm100Standard {
      get { return pm100Standard_; }
      set {
        pm100Standard_ = value;
      }
    }

    /// <summary>Field number for the "pm10_environmental" field.</summary>
    public const int Pm10EnvironmentalFieldNumber = 4;
    private uint pm10Environmental_;
    /// <summary>
    ///
    /// Concentration Units Environmental PM1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm10Environmental {
      get { return pm10Environmental_; }
      set {
        pm10Environmental_ = value;
      }
    }

    /// <summary>Field number for the "pm25_environmental" field.</summary>
    public const int Pm25EnvironmentalFieldNumber = 5;
    private uint pm25Environmental_;
    /// <summary>
    ///
    /// Concentration Units Environmental PM2.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm25Environmental {
      get { return pm25Environmental_; }
      set {
        pm25Environmental_ = value;
      }
    }

    /// <summary>Field number for the "pm100_environmental" field.</summary>
    public const int Pm100EnvironmentalFieldNumber = 6;
    private uint pm100Environmental_;
    /// <summary>
    ///
    /// Concentration Units Environmental PM10.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm100Environmental {
      get { return pm100Environmental_; }
      set {
        pm100Environmental_ = value;
      }
    }

    /// <summary>Field number for the "particles_03um" field.</summary>
    public const int Particles03UmFieldNumber = 7;
    private uint particles03Um_;
    /// <summary>
    ///
    /// 0.3um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles03Um {
      get { return particles03Um_; }
      set {
        particles03Um_ = value;
      }
    }

    /// <summary>Field number for the "particles_05um" field.</summary>
    public const int Particles05UmFieldNumber = 8;
    private uint particles05Um_;
    /// <summary>
    ///
    /// 0.5um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles05Um {
      get { return particles05Um_; }
      set {
        particles05Um_ = value;
      }
    }

    /// <summary>Field number for the "particles_10um" field.</summary>
    public const int Particles10UmFieldNumber = 9;
    private uint particles10Um_;
    /// <summary>
    ///
    /// 1.0um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles10Um {
      get { return particles10Um_; }
      set {
        particles10Um_ = value;
      }
    }

    /// <summary>Field number for the "particles_25um" field.</summary>
    public const int Particles25UmFieldNumber = 10;
    private uint particles25Um_;
    /// <summary>
    ///
    /// 2.5um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles25Um {
      get { return particles25Um_; }
      set {
        particles25Um_ = value;
      }
    }

    /// <summary>Field number for the "particles_50um" field.</summary>
    public const int Particles50UmFieldNumber = 11;
    private uint particles50Um_;
    /// <summary>
    ///
    /// 5.0um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles50Um {
      get { return particles50Um_; }
      set {
        particles50Um_ = value;
      }
    }

    /// <summary>Field number for the "particles_100um" field.</summary>
    public const int Particles100UmFieldNumber = 12;
    private uint particles100Um_;
    /// <summary>
    ///
    /// 10.0um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles100Um {
      get { return particles100Um_; }
      set {
        particles100Um_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AirQualityMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AirQualityMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pm10Standard != other.Pm10Standard) return false;
      if (Pm25Standard != other.Pm25Standard) return false;
      if (Pm100Standard != other.Pm100Standard) return false;
      if (Pm10Environmental != other.Pm10Environmental) return false;
      if (Pm25Environmental != other.Pm25Environmental) return false;
      if (Pm100Environmental != other.Pm100Environmental) return false;
      if (Particles03Um != other.Particles03Um) return false;
      if (Particles05Um != other.Particles05Um) return false;
      if (Particles10Um != other.Particles10Um) return false;
      if (Particles25Um != other.Particles25Um) return false;
      if (Particles50Um != other.Particles50Um) return false;
      if (Particles100Um != other.Particles100Um) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Pm10Standard != 0) hash ^= Pm10Standard.GetHashCode();
      if (Pm25Standard != 0) hash ^= Pm25Standard.GetHashCode();
      if (Pm100Standard != 0) hash ^= Pm100Standard.GetHashCode();
      if (Pm10Environmental != 0) hash ^= Pm10Environmental.GetHashCode();
      if (Pm25Environmental != 0) hash ^= Pm25Environmental.GetHashCode();
      if (Pm100Environmental != 0) hash ^= Pm100Environmental.GetHashCode();
      if (Particles03Um != 0) hash ^= Particles03Um.GetHashCode();
      if (Particles05Um != 0) hash ^= Particles05Um.GetHashCode();
      if (Particles10Um != 0) hash ^= Particles10Um.GetHashCode();
      if (Particles25Um != 0) hash ^= Particles25Um.GetHashCode();
      if (Particles50Um != 0) hash ^= Particles50Um.GetHashCode();
      if (Particles100Um != 0) hash ^= Particles100Um.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pm10Standard != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pm10Standard);
      }
      if (Pm25Standard != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pm25Standard);
      }
      if (Pm100Standard != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pm100Standard);
      }
      if (Pm10Environmental != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pm10Environmental);
      }
      if (Pm25Environmental != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Pm25Environmental);
      }
      if (Pm100Environmental != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Pm100Environmental);
      }
      if (Particles03Um != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Particles03Um);
      }
      if (Particles05Um != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Particles05Um);
      }
      if (Particles10Um != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Particles10Um);
      }
      if (Particles25Um != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Particles25Um);
      }
      if (Particles50Um != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Particles50Um);
      }
      if (Particles100Um != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Particles100Um);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pm10Standard != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pm10Standard);
      }
      if (Pm25Standard != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pm25Standard);
      }
      if (Pm100Standard != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pm100Standard);
      }
      if (Pm10Environmental != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pm10Environmental);
      }
      if (Pm25Environmental != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Pm25Environmental);
      }
      if (Pm100Environmental != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Pm100Environmental);
      }
      if (Particles03Um != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Particles03Um);
      }
      if (Particles05Um != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Particles05Um);
      }
      if (Particles10Um != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Particles10Um);
      }
      if (Particles25Um != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Particles25Um);
      }
      if (Particles50Um != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Particles50Um);
      }
      if (Particles100Um != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Particles100Um);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Pm10Standard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm10Standard);
      }
      if (Pm25Standard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm25Standard);
      }
      if (Pm100Standard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm100Standard);
      }
      if (Pm10Environmental != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm10Environmental);
      }
      if (Pm25Environmental != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm25Environmental);
      }
      if (Pm100Environmental != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm100Environmental);
      }
      if (Particles03Um != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles03Um);
      }
      if (Particles05Um != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles05Um);
      }
      if (Particles10Um != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles10Um);
      }
      if (Particles25Um != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles25Um);
      }
      if (Particles50Um != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles50Um);
      }
      if (Particles100Um != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles100Um);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AirQualityMetrics other) {
      if (other == null) {
        return;
      }
      if (other.Pm10Standard != 0) {
        Pm10Standard = other.Pm10Standard;
      }
      if (other.Pm25Standard != 0) {
        Pm25Standard = other.Pm25Standard;
      }
      if (other.Pm100Standard != 0) {
        Pm100Standard = other.Pm100Standard;
      }
      if (other.Pm10Environmental != 0) {
        Pm10Environmental = other.Pm10Environmental;
      }
      if (other.Pm25Environmental != 0) {
        Pm25Environmental = other.Pm25Environmental;
      }
      if (other.Pm100Environmental != 0) {
        Pm100Environmental = other.Pm100Environmental;
      }
      if (other.Particles03Um != 0) {
        Particles03Um = other.Particles03Um;
      }
      if (other.Particles05Um != 0) {
        Particles05Um = other.Particles05Um;
      }
      if (other.Particles10Um != 0) {
        Particles10Um = other.Particles10Um;
      }
      if (other.Particles25Um != 0) {
        Particles25Um = other.Particles25Um;
      }
      if (other.Particles50Um != 0) {
        Particles50Um = other.Particles50Um;
      }
      if (other.Particles100Um != 0) {
        Particles100Um = other.Particles100Um;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pm10Standard = input.ReadUInt32();
            break;
          }
          case 16: {
            Pm25Standard = input.ReadUInt32();
            break;
          }
          case 24: {
            Pm100Standard = input.ReadUInt32();
            break;
          }
          case 32: {
            Pm10Environmental = input.ReadUInt32();
            break;
          }
          case 40: {
            Pm25Environmental = input.ReadUInt32();
            break;
          }
          case 48: {
            Pm100Environmental = input.ReadUInt32();
            break;
          }
          case 56: {
            Particles03Um = input.ReadUInt32();
            break;
          }
          case 64: {
            Particles05Um = input.ReadUInt32();
            break;
          }
          case 72: {
            Particles10Um = input.ReadUInt32();
            break;
          }
          case 80: {
            Particles25Um = input.ReadUInt32();
            break;
          }
          case 88: {
            Particles50Um = input.ReadUInt32();
            break;
          }
          case 96: {
            Particles100Um = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pm10Standard = input.ReadUInt32();
            break;
          }
          case 16: {
            Pm25Standard = input.ReadUInt32();
            break;
          }
          case 24: {
            Pm100Standard = input.ReadUInt32();
            break;
          }
          case 32: {
            Pm10Environmental = input.ReadUInt32();
            break;
          }
          case 40: {
            Pm25Environmental = input.ReadUInt32();
            break;
          }
          case 48: {
            Pm100Environmental = input.ReadUInt32();
            break;
          }
          case 56: {
            Particles03Um = input.ReadUInt32();
            break;
          }
          case 64: {
            Particles05Um = input.ReadUInt32();
            break;
          }
          case 72: {
            Particles10Um = input.ReadUInt32();
            break;
          }
          case 80: {
            Particles25Um = input.ReadUInt32();
            break;
          }
          case 88: {
            Particles50Um = input.ReadUInt32();
            break;
          }
          case 96: {
            Particles100Um = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Types of Measurements the telemetry module is equipped to handle
  /// </summary>
  public sealed partial class Telemetry : pb::IMessage<Telemetry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Telemetry> _parser = new pb::MessageParser<Telemetry>(() => new Telemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Telemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry(Telemetry other) : this() {
      time_ = other.time_;
      switch (other.VariantCase) {
        case VariantOneofCase.DeviceMetrics:
          DeviceMetrics = other.DeviceMetrics.Clone();
          break;
        case VariantOneofCase.EnvironmentMetrics:
          EnvironmentMetrics = other.EnvironmentMetrics.Clone();
          break;
        case VariantOneofCase.AirQualityMetrics:
          AirQualityMetrics = other.AirQualityMetrics.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry Clone() {
      return new Telemetry(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private uint time_;
    /// <summary>
    ///
    /// This is usually not sent over the mesh (to save space), but it is sent
    /// from the phone so that the local device can set its RTC If it is sent over
    /// the mesh (because there are devices on the mesh without GPS), it will only
    /// be sent by devices which has a hardware GPS clock (IE Mobile Phone).
    /// seconds since 1970
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "device_metrics" field.</summary>
    public const int DeviceMetricsFieldNumber = 2;
    /// <summary>
    ///
    /// Key native device metrics such as battery level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.DeviceMetrics DeviceMetrics {
      get { return variantCase_ == VariantOneofCase.DeviceMetrics ? (global::Meshtastic.Protobufs.DeviceMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.DeviceMetrics;
      }
    }

    /// <summary>Field number for the "environment_metrics" field.</summary>
    public const int EnvironmentMetricsFieldNumber = 3;
    /// <summary>
    ///
    /// Weather station or other environmental metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.EnvironmentMetrics EnvironmentMetrics {
      get { return variantCase_ == VariantOneofCase.EnvironmentMetrics ? (global::Meshtastic.Protobufs.EnvironmentMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.EnvironmentMetrics;
      }
    }

    /// <summary>Field number for the "air_quality_metrics" field.</summary>
    public const int AirQualityMetricsFieldNumber = 4;
    /// <summary>
    ///
    /// Air quality metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.AirQualityMetrics AirQualityMetrics {
      get { return variantCase_ == VariantOneofCase.AirQualityMetrics ? (global::Meshtastic.Protobufs.AirQualityMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.AirQualityMetrics;
      }
    }

    private object variant_;
    /// <summary>Enum of possible cases for the "variant" oneof.</summary>
    public enum VariantOneofCase {
      None = 0,
      DeviceMetrics = 2,
      EnvironmentMetrics = 3,
      AirQualityMetrics = 4,
    }
    private VariantOneofCase variantCase_ = VariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VariantOneofCase VariantCase {
      get { return variantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVariant() {
      variantCase_ = VariantOneofCase.None;
      variant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Telemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Telemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!object.Equals(DeviceMetrics, other.DeviceMetrics)) return false;
      if (!object.Equals(EnvironmentMetrics, other.EnvironmentMetrics)) return false;
      if (!object.Equals(AirQualityMetrics, other.AirQualityMetrics)) return false;
      if (VariantCase != other.VariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (variantCase_ == VariantOneofCase.DeviceMetrics) hash ^= DeviceMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) hash ^= EnvironmentMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) hash ^= AirQualityMetrics.GetHashCode();
      hash ^= (int) variantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Time);
      }
      if (variantCase_ == VariantOneofCase.DeviceMetrics) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceMetrics);
      }
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
        output.WriteRawTag(26);
        output.WriteMessage(EnvironmentMetrics);
      }
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
        output.WriteRawTag(34);
        output.WriteMessage(AirQualityMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Time);
      }
      if (variantCase_ == VariantOneofCase.DeviceMetrics) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceMetrics);
      }
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
        output.WriteRawTag(26);
        output.WriteMessage(EnvironmentMetrics);
      }
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
        output.WriteRawTag(34);
        output.WriteMessage(AirQualityMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + 4;
      }
      if (variantCase_ == VariantOneofCase.DeviceMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceMetrics);
      }
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentMetrics);
      }
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirQualityMetrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Telemetry other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      switch (other.VariantCase) {
        case VariantOneofCase.DeviceMetrics:
          if (DeviceMetrics == null) {
            DeviceMetrics = new global::Meshtastic.Protobufs.DeviceMetrics();
          }
          DeviceMetrics.MergeFrom(other.DeviceMetrics);
          break;
        case VariantOneofCase.EnvironmentMetrics:
          if (EnvironmentMetrics == null) {
            EnvironmentMetrics = new global::Meshtastic.Protobufs.EnvironmentMetrics();
          }
          EnvironmentMetrics.MergeFrom(other.EnvironmentMetrics);
          break;
        case VariantOneofCase.AirQualityMetrics:
          if (AirQualityMetrics == null) {
            AirQualityMetrics = new global::Meshtastic.Protobufs.AirQualityMetrics();
          }
          AirQualityMetrics.MergeFrom(other.AirQualityMetrics);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFixed32();
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.DeviceMetrics subBuilder = new global::Meshtastic.Protobufs.DeviceMetrics();
            if (variantCase_ == VariantOneofCase.DeviceMetrics) {
              subBuilder.MergeFrom(DeviceMetrics);
            }
            input.ReadMessage(subBuilder);
            DeviceMetrics = subBuilder;
            break;
          }
          case 26: {
            global::Meshtastic.Protobufs.EnvironmentMetrics subBuilder = new global::Meshtastic.Protobufs.EnvironmentMetrics();
            if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
              subBuilder.MergeFrom(EnvironmentMetrics);
            }
            input.ReadMessage(subBuilder);
            EnvironmentMetrics = subBuilder;
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.AirQualityMetrics subBuilder = new global::Meshtastic.Protobufs.AirQualityMetrics();
            if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
              subBuilder.MergeFrom(AirQualityMetrics);
            }
            input.ReadMessage(subBuilder);
            AirQualityMetrics = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Time = input.ReadFixed32();
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.DeviceMetrics subBuilder = new global::Meshtastic.Protobufs.DeviceMetrics();
            if (variantCase_ == VariantOneofCase.DeviceMetrics) {
              subBuilder.MergeFrom(DeviceMetrics);
            }
            input.ReadMessage(subBuilder);
            DeviceMetrics = subBuilder;
            break;
          }
          case 26: {
            global::Meshtastic.Protobufs.EnvironmentMetrics subBuilder = new global::Meshtastic.Protobufs.EnvironmentMetrics();
            if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
              subBuilder.MergeFrom(EnvironmentMetrics);
            }
            input.ReadMessage(subBuilder);
            EnvironmentMetrics = subBuilder;
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.AirQualityMetrics subBuilder = new global::Meshtastic.Protobufs.AirQualityMetrics();
            if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
              subBuilder.MergeFrom(AirQualityMetrics);
            }
            input.ReadMessage(subBuilder);
            AirQualityMetrics = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
